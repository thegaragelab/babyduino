
optiboot_babyduino168_nc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fe4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00003e00  00003e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000258  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000290  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000176  00000000  00000000  00000512  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000192  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000139  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000026e  00000000  00000000  000009e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3e00:	0f 92       	push	r0
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e06:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    3e08:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e0a:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart(ch);
    3e0c:	81 ff       	sbrs	r24, 1
    3e0e:	e4 d0       	rcall	.+456    	; 0x3fd8 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e10:	85 e0       	ldi	r24, 0x05	; 5
    3e12:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    3e1c:	88 e1       	ldi	r24, 0x18	; 24
    3e1e:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    3e22:	86 e0       	ldi	r24, 0x06	; 6
    3e24:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e28:	82 e2       	ldi	r24, 0x22	; 34
    3e2a:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
    3e30:	bd d0       	rcall	.+378    	; 0x3fac <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e32:	25 9a       	sbi	0x04, 5	; 4
    3e34:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e36:	88 e1       	ldi	r24, 0x18	; 24
    3e38:	9e ef       	ldi	r25, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    3e3a:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e3c:	90 93 85 00 	sts	0x0085, r25
    3e40:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
    3e44:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
    3e46:	b0 9b       	sbis	0x16, 0	; 22
    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3e4a:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e4c:	a8 95       	wdr
    3e4e:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
    3e52:	00 e0       	ldi	r16, 0x00	; 0
    3e54:	10 e0       	ldi	r17, 0x00	; 0
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e56:	ee 24       	eor	r14, r14
    3e58:	e3 94       	inc	r14
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e5a:	e5 e0       	ldi	r30, 0x05	; 5
    3e5c:	de 2e       	mov	r13, r30
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e5e:	f1 e1       	ldi	r31, 0x11	; 17
    3e60:	cf 2e       	mov	r12, r31
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3e62:	a3 e0       	ldi	r26, 0x03	; 3
    3e64:	fa 2e       	mov	r15, r26
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e66:	96 d0       	rcall	.+300    	; 0x3f94 <getch>

    if(ch == STK_GET_PARAMETER) {
    3e68:	81 34       	cpi	r24, 0x41	; 65
    3e6a:	71 f4       	brne	.+28     	; 0x3e88 <main+0x88>
      unsigned char which = getch();
    3e6c:	93 d0       	rcall	.+294    	; 0x3f94 <getch>
      verifySpace();
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	a3 d0       	rcall	.+326    	; 0x3fb8 <verifySpace>
      if (which == 0x82) {
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	82 38       	cpi	r24, 0x82	; 130
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <main+0x7a>
    3e78:	7c c0       	rjmp	.+248    	; 0x3f72 <main+0x172>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    3e7a:	81 38       	cpi	r24, 0x81	; 129
    3e7c:	11 f4       	brne	.+4      	; 0x3e82 <main+0x82>
	  putch(OPTIBOOT_MAJVER);
    3e7e:	84 e0       	ldi	r24, 0x04	; 4
    3e80:	01 c0       	rjmp	.+2      	; 0x3e84 <main+0x84>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    3e82:	83 e0       	ldi	r24, 0x03	; 3
    3e84:	80 d0       	rcall	.+256    	; 0x3f86 <putch>
    3e86:	7c c0       	rjmp	.+248    	; 0x3f80 <main+0x180>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e88:	82 34       	cpi	r24, 0x42	; 66
    3e8a:	11 f4       	brne	.+4      	; 0x3e90 <main+0x90>
      // SET DEVICE is ignored
      getNch(20);
    3e8c:	84 e1       	ldi	r24, 0x14	; 20
    3e8e:	03 c0       	rjmp	.+6      	; 0x3e96 <main+0x96>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e90:	85 34       	cpi	r24, 0x45	; 69
    3e92:	19 f4       	brne	.+6      	; 0x3e9a <main+0x9a>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e94:	85 e0       	ldi	r24, 0x05	; 5
    3e96:	98 d0       	rcall	.+304    	; 0x3fc8 <getNch>
    3e98:	73 c0       	rjmp	.+230    	; 0x3f80 <main+0x180>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e9a:	85 35       	cpi	r24, 0x55	; 85
    3e9c:	69 f4       	brne	.+26     	; 0x3eb8 <main+0xb8>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3e9e:	7a d0       	rcall	.+244    	; 0x3f94 <getch>
    3ea0:	88 2e       	mov	r8, r24
    3ea2:	99 24       	eor	r9, r9
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3ea4:	77 d0       	rcall	.+238    	; 0x3f94 <getch>
    3ea6:	08 2f       	mov	r16, r24
    3ea8:	10 e0       	ldi	r17, 0x00	; 0
    3eaa:	10 2f       	mov	r17, r16
    3eac:	00 27       	eor	r16, r16
    3eae:	08 29       	or	r16, r8
    3eb0:	19 29       	or	r17, r9
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3eb2:	00 0f       	add	r16, r16
    3eb4:	11 1f       	adc	r17, r17
    3eb6:	63 c0       	rjmp	.+198    	; 0x3f7e <main+0x17e>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3eb8:	86 35       	cpi	r24, 0x56	; 86
    3eba:	21 f4       	brne	.+8      	; 0x3ec4 <main+0xc4>
      // UNIVERSAL command is ignored
      getNch(4);
    3ebc:	84 e0       	ldi	r24, 0x04	; 4
    3ebe:	84 d0       	rcall	.+264    	; 0x3fc8 <getNch>
      putch(0x00);
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	e0 cf       	rjmp	.-64     	; 0x3e84 <main+0x84>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3ec4:	84 36       	cpi	r24, 0x64	; 100
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <main+0xca>
    3ec8:	3f c0       	rjmp	.+126    	; 0x3f48 <main+0x148>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    3eca:	64 d0       	rcall	.+200    	; 0x3f94 <getch>
      length = getch();
    3ecc:	63 d0       	rcall	.+198    	; 0x3f94 <getch>
    3ece:	b8 2e       	mov	r11, r24
      getch();
    3ed0:	61 d0       	rcall	.+194    	; 0x3f94 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ed2:	88 e3       	ldi	r24, 0x38	; 56
    3ed4:	00 30       	cpi	r16, 0x00	; 0
    3ed6:	18 07       	cpc	r17, r24
    3ed8:	18 f4       	brcc	.+6      	; 0x3ee0 <main+0xe0>
    3eda:	f8 01       	movw	r30, r16
    3edc:	f7 be       	out	0x37, r15	; 55
    3ede:	e8 95       	spm
    3ee0:	81 2c       	mov	r8, r1
    3ee2:	51 e0       	ldi	r21, 0x01	; 1
    3ee4:	95 2e       	mov	r9, r21

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ee6:	56 d0       	rcall	.+172    	; 0x3f94 <getch>
    3ee8:	f4 01       	movw	r30, r8
    3eea:	81 93       	st	Z+, r24
    3eec:	4f 01       	movw	r8, r30
      while (--length);
    3eee:	be 16       	cp	r11, r30
    3ef0:	d1 f7       	brne	.-12     	; 0x3ee6 <main+0xe6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ef2:	f8 e3       	ldi	r31, 0x38	; 56
    3ef4:	00 30       	cpi	r16, 0x00	; 0
    3ef6:	1f 07       	cpc	r17, r31
    3ef8:	18 f0       	brcs	.+6      	; 0x3f00 <main+0x100>
    3efa:	f8 01       	movw	r30, r16
    3efc:	f7 be       	out	0x37, r15	; 55
    3efe:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    3f00:	5b d0       	rcall	.+182    	; 0x3fb8 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3f02:	07 b6       	in	r0, 0x37	; 55
    3f04:	00 fc       	sbrc	r0, 0
    3f06:	fd cf       	rjmp	.-6      	; 0x3f02 <main+0x102>
    3f08:	f8 01       	movw	r30, r16
    3f0a:	a0 e0       	ldi	r26, 0x00	; 0
    3f0c:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3f0e:	2c 91       	ld	r18, X
    3f10:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    3f12:	11 96       	adiw	r26, 0x01	; 1
    3f14:	8c 91       	ld	r24, X
    3f16:	11 97       	sbiw	r26, 0x01	; 1
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	98 2f       	mov	r25, r24
    3f1c:	88 27       	eor	r24, r24
    3f1e:	82 2b       	or	r24, r18
    3f20:	93 2b       	or	r25, r19
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3f22:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f24:	0c 01       	movw	r0, r24
    3f26:	e7 be       	out	0x37, r14	; 55
    3f28:	e8 95       	spm
    3f2a:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f2c:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	a0 38       	cpi	r26, 0x80	; 128
    3f32:	b8 07       	cpc	r27, r24
    3f34:	61 f7       	brne	.-40     	; 0x3f0e <main+0x10e>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f36:	f8 01       	movw	r30, r16
    3f38:	d7 be       	out	0x37, r13	; 55
    3f3a:	e8 95       	spm
      boot_spm_busy_wait();
    3f3c:	07 b6       	in	r0, 0x37	; 55
    3f3e:	00 fc       	sbrc	r0, 0
    3f40:	fd cf       	rjmp	.-6      	; 0x3f3c <main+0x13c>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f42:	c7 be       	out	0x37, r12	; 55
    3f44:	e8 95       	spm
    3f46:	1c c0       	rjmp	.+56     	; 0x3f80 <main+0x180>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f48:	84 37       	cpi	r24, 0x74	; 116
    3f4a:	61 f4       	brne	.+24     	; 0x3f64 <main+0x164>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    3f4c:	23 d0       	rcall	.+70     	; 0x3f94 <getch>
      length = getch();
    3f4e:	22 d0       	rcall	.+68     	; 0x3f94 <getch>
    3f50:	b8 2e       	mov	r11, r24
      getch();
    3f52:	20 d0       	rcall	.+64     	; 0x3f94 <getch>

      verifySpace();
    3f54:	31 d0       	rcall	.+98     	; 0x3fb8 <verifySpace>
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
        putch(ch);
    3f56:	f8 01       	movw	r30, r16
    3f58:	85 91       	lpm	r24, Z+
    3f5a:	8f 01       	movw	r16, r30
    3f5c:	14 d0       	rcall	.+40     	; 0x3f86 <putch>
      } while (--length);
    3f5e:	ba 94       	dec	r11
    3f60:	d1 f7       	brne	.-12     	; 0x3f56 <main+0x156>
    3f62:	0e c0       	rjmp	.+28     	; 0x3f80 <main+0x180>
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f64:	85 37       	cpi	r24, 0x75	; 117
    3f66:	39 f4       	brne	.+14     	; 0x3f76 <main+0x176>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f68:	27 d0       	rcall	.+78     	; 0x3fb8 <verifySpace>
      putch(SIGNATURE_0);
    3f6a:	8e e1       	ldi	r24, 0x1E	; 30
    3f6c:	0c d0       	rcall	.+24     	; 0x3f86 <putch>
      putch(SIGNATURE_1);
    3f6e:	84 e9       	ldi	r24, 0x94	; 148
    3f70:	0a d0       	rcall	.+20     	; 0x3f86 <putch>
      putch(SIGNATURE_2);
    3f72:	86 e0       	ldi	r24, 0x06	; 6
    3f74:	87 cf       	rjmp	.-242    	; 0x3e84 <main+0x84>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f76:	81 35       	cpi	r24, 0x51	; 81
    3f78:	11 f4       	brne	.+4      	; 0x3f7e <main+0x17e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f7a:	88 e0       	ldi	r24, 0x08	; 8
    3f7c:	17 d0       	rcall	.+46     	; 0x3fac <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f7e:	1c d0       	rcall	.+56     	; 0x3fb8 <verifySpace>
    }
    putch(STK_OK);
    3f80:	80 e1       	ldi	r24, 0x10	; 16
    3f82:	01 d0       	rcall	.+2      	; 0x3f86 <putch>
  }
    3f84:	70 cf       	rjmp	.-288    	; 0x3e66 <main+0x66>

00003f86 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f86:	90 91 c0 00 	lds	r25, 0x00C0
    3f8a:	95 ff       	sbrs	r25, 5
    3f8c:	fc cf       	rjmp	.-8      	; 0x3f86 <putch>
  UART_UDR = ch;
    3f8e:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f92:	08 95       	ret

00003f94 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f94:	80 91 c0 00 	lds	r24, 0x00C0
    3f98:	87 ff       	sbrs	r24, 7
    3f9a:	fc cf       	rjmp	.-8      	; 0x3f94 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f9c:	80 91 c0 00 	lds	r24, 0x00C0
    3fa0:	84 fd       	sbrc	r24, 4
    3fa2:	01 c0       	rjmp	.+2      	; 0x3fa6 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fa4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    3fa6:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3faa:	08 95       	ret

00003fac <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fac:	e0 e6       	ldi	r30, 0x60	; 96
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	98 e1       	ldi	r25, 0x18	; 24
    3fb2:	90 83       	st	Z, r25
  WDTCSR = x;
    3fb4:	80 83       	st	Z, r24
}
    3fb6:	08 95       	ret

00003fb8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fb8:	ed df       	rcall	.-38     	; 0x3f94 <getch>
    3fba:	80 32       	cpi	r24, 0x20	; 32
    3fbc:	19 f0       	breq	.+6      	; 0x3fc4 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fbe:	88 e0       	ldi	r24, 0x08	; 8
    3fc0:	f5 df       	rcall	.-22     	; 0x3fac <watchdogConfig>
    3fc2:	ff cf       	rjmp	.-2      	; 0x3fc2 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fc4:	84 e1       	ldi	r24, 0x14	; 20
    3fc6:	df cf       	rjmp	.-66     	; 0x3f86 <putch>

00003fc8 <getNch>:
}
    3fc8:	cf 93       	push	r28
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fca:	c8 2f       	mov	r28, r24
    3fcc:	e3 df       	rcall	.-58     	; 0x3f94 <getch>
  do getch(); while (--count);
    3fce:	c1 50       	subi	r28, 0x01	; 1
    3fd0:	e9 f7       	brne	.-6      	; 0x3fcc <getNch+0x4>
    3fd2:	f2 df       	rcall	.-28     	; 0x3fb8 <verifySpace>
  verifySpace();
    3fd4:	cf 91       	pop	r28
}
    3fd6:	08 95       	ret

00003fd8 <appStart>:
    3fd8:	28 2e       	mov	r2, r24

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fda:	80 e0       	ldi	r24, 0x00	; 0

  watchdogConfig(WATCHDOG_OFF);
    3fdc:	e7 df       	rcall	.-50     	; 0x3fac <watchdogConfig>
    3fde:	ee 27       	eor	r30, r30
  __asm__ __volatile__ (
    3fe0:	ff 27       	eor	r31, r31
    3fe2:	09 94       	ijmp
